---
openapi: 3.0.0
info:
  title: EWallet
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/NULP15/E-Wallet/1.0.0
- url: https://virtserver.swaggerhub.com/itowanai/musicPlayer/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://petstore.swagger.io/v2
tags:
- name: transaction
  description: Operations about transactions
- name: wallet
  description: Operations about wallets
- name: user
  description: Operations about user
paths:
  /wallet/getBalance:
    get:
      tags:
      - wallet
      summary: Get balance of your wallet
      operationId: getBalance
      parameters:
      - name: ID
        in: query
        description: Find by wallet ID
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Wallet not found
        "405":
          description: Validation exception
      security:
      - EWallet:
        - write:wallet
        - read:wallet
    put:
      tags:
      - wallet
      summary: Update an existing wallet
      operationId: updateWallet
      requestBody:
        $ref: '#/components/requestBodies/Wallet'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Wallet not found
        "405":
          description: Validation exception
      security:
      - EWallet:
        - write:wallet
        - read:wallet
    post:
      tags:
      - wallet
      summary: Add a new wallet
      operationId: addWallet
      requestBody:
        $ref: '#/components/requestBodies/Wallet'
      responses:
        "405":
          description: Invalid input
      security:
      - EWallet:
        - write:wallet
        - read:wallet
  /wallet/findById:
    get:
      tags:
      - wallet
      summary: Finds wallet by ID
      operationId: findWalletByID
      parameters:
      - name: ID
        in: query
        description: Find by wallet ID
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
        "400":
          description: Invalid ID
        "404":
          description: Wallet Not Found
      security:
      - EWallet:
        - write:EWallet
        - read:EWallet
  /wallet/delete_{walletID}:
    delete:
      tags:
      - wallet
      summary: Deletes a wallet
      operationId: deleteWallet
      parameters:
      - name: walletID
        in: path
        description: Wallet id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Wallet not found
      security:
      - EWallet:
        - write:wallet
        - read:wallet
  /transaction:
    get:
      tags:
      - transaction
      summary: Get transaction by ID
      operationId: getTransaction
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Transaction not found
        "405":
          description: Validation exception

  /transaction/new:
    post:
      tags:
      - transaction
      summary: Create new transaction
      operationId: newTransaction
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
            application/xml:
              schema:
                $ref: '#/components/schemas/Transaction'
        "400":
          description: Invalid input
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sender_id:
          type: integer
          format: int64
        recipient_id:
          type: integer
          format: int64
        value:
          type: integer
          format: int64
      xml:
        name: Transaction
    Wallet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        privacy:
          type: boolean
          default: True
        owner_id:
          type: integer
          format: int64
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
      xml:
        name: Transaction
  requestBodies:
    Wallet:
      description: Wallet object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Wallet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Wallet'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    EWallet:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:wallet: modify wallet
            read:wallet: get wallet